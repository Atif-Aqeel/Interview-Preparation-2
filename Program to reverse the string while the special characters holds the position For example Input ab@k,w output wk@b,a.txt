Efficient Solution: 

The time complexity of the above solution is O(n), but it requires extra space, and it does two traversals of an input string. 
We can reverse with one traversal and without extra space. Below is the algorithm. 

1) Let input string be 'str[]' and length of string be 'n'
2) l = 0, r = n-1
3) While l is smaller than r, do following
    a) If str[l] is not an alphabetic character, do l++
    b) Else If str[r] is not an alphabetic character, do r--
    c) Else swap str[l] and str[r]
Below are implementations of the above algorithm.


// C++ program to reverse a string  with special characters
#include <bits/stdc++.h>
using namespace std;
 
// Returns true if x is an alphabetic character, false
// otherwise
bool isAlphabet(char x)
{
    return ((x >= 'A' && x <= 'Z') || (x >= 'a' && x <= 'z'));
}
 
void reverse(char str[])
{
    // Initialize left and right pointers
    int r = strlen(str) - 1, l = 0;
 
    // Traverse string from both ends until 'l' and 'r'
    while (l < r) {
        // Ignore special characters
        if (!isAlphabet(str[l]))
            l++;
        else if (!isAlphabet(str[r]))
            r--;
 
        else // Both str[l] and str[r] are not special
        {
            swap(str[l], str[r]);
            l++;
            r--;
        }
    }
}
 
// Driver code
int main()
{
    char str[] = "a!!!b.c.d,e'f,ghi";
    cout << "Input string: " << str << endl;
    reverse(str);
    cout << "Output string: " << str << endl;
    return 0;
}
 
// This code is contributed by Sania Kumari Gupta
Output
Input string: a!!!b.c.d,e'f,ghi
Output string: i!!!h.g.f,e'd,cba
Time Complexity: O(N) where N is the length of the string.
Auxiliary Space: O(1). 